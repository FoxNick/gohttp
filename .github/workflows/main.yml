name: WASM CI/CD Pipeline
on:
  workflow_dispatch:

env:
  LIB_NAME: libgohttp
  OUTPUT_DIR: gohttp/gosrc/server/static
  VERSION_FILE: gohttp/gosrc/version

jobs:
  setup:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # 获取完整提交历史[2](@ref)

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'  # 指定精确版本避免兼容问题[2](@ref)
        check-latest: true  # 确保获取最新补丁版本[2](@ref)

    - name: Install WASM target
      run: go env -w GOOS=js GOARCH=wasm  # 显式设置编译目标[1](@ref)

    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/go/pkg/mod
          gohttp/gosrc
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}  # 依赖变更自动失效缓存[1](@ref)

  build:
    needs: setup
    runs-on: ubuntu-latest
    strategy:
      matrix:
        build_type: [prod]  # 矩阵构建支持多模式[1](@ref)
    steps:
    - name: Inject metadata
      run: |
        echo "BUILD_TIME=$(date +%s)" >> $GITHUB_ENV
        echo "GO_VERSION=$(go version)" >> $GITHUB_ENV
        echo "GIT_HASH=${{ github.sha }}" >> $GITHUB_ENV
        echo "VERSION=$(cat ${{ env.VERSION_FILE }})" >> $GITHUB_ENV

    - name: Configure build flags
      run: |
        if [ "${{ matrix.build_type }}" == "prod" ]; then
          echo "LDFLAGS=-s -w -X gohttp/gosrc/gohttp.VERSION=$VERSION" >> $GITHUB_ENV
        else
          echo "LDFLAGS=-X gohttp/gosrc/gohttp.DEBUG=true" >> $GITHUB_ENV
        fi

    - name: Build WASM
      run: |
        mkdir -p ${{ env.OUTPUT_DIR }}
        GOOS=js GOARCH=wasm go build \
          -ldflags="${{ env.LDFLAGS }}" \
          -o ${{ env.OUTPUT_DIR }}/${{ env.LIB_NAME }}_${{ matrix.build_type }}.wasm gohttp/gosrc/gohttp/gohttp.go

    - name: Compress artifact
      run: |
        gzip -9 -k ${{ env.OUTPUT_DIR }}/${{ env.LIB_NAME }}_${{ matrix.build_type }}.wasm
        echo "${{ matrix.build_type }}_SIZE=$(wc -c < ${{ env.OUTPUT_DIR }}/${{ env.LIB_NAME }}_${{ matrix.build_type }}.wasm.gz)" >> $GITHUB_ENV

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
    - name: Upload artifact
      uses: actions/upload-artifact@v3
      with:
        name: wasm-assets
        path: |
          ${{ env.OUTPUT_DIR }}/*.wasm
          ${{ env.OUTPUT_DIR }}/*.gz
        retention-days: 7  # 设置制品保留周期[1](@ref)
