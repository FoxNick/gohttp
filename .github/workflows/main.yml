name: WASM CI/CD Pipeline
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  LIB_NAME: libgohttp
  OUTPUT_DIR: ./server/static
  VERSION_FILE: ../version

jobs:
  setup:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # 获取完整提交历史[3](@ref)

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'

    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/go/pkg/mod
          gohttp/gosrc
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}

  build:
    needs: setup
    runs-on: ubuntu-latest
    env:
      VERSION: ${{ github.workflow }}-${{ github.sha }}
    steps:
    - name: Inject metadata
      run: |
        echo "BUILD_TIME=$(date +%s)" >> $GITHUB_ENV
        echo "GO_VERSION=$(go version)" >> $GITHUB_ENV
        echo "GIT_HASH=${{ github.sha }}" >> $GITHUB_ENV
        echo "VERSION=$(cat ${{ env.VERSION_FILE }})" >> $GITHUB_ENV

    - name: Production build
      if: github.event_name == 'push'
      run: |
        make build
        gzip -9 -k ${{ env.OUTPUT_DIR }}/${{ env.LIB_NAME }}.wasm
        echo "WASM_SIZE=$(wc -c < ${{ env.OUTPUT_DIR }}/${{ env.LIB_NAME }}.wasm.gz)" >> $GITHUB_ENV

    - name: Debug build
      if: github.event_name == 'pull_request'
      run: |
        make debug
        gzip -9 -k ${{ env.OUTPUT_DIR }}/${{ env.LIB_NAME }}.wasm
        echo "DEBUG_SIZE=$(wc -c < ${{ env.OUTPUT_DIR }}/${{ env.LIB_NAME }}.wasm.gz)" >> $GITHUB_ENV

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
    - name: Upload artifact
      uses: actions/upload-artifact@v3
      with:
        name: wasm-assets
        path: |
          ${{ env.OUTPUT_DIR }}/*.wasm
          ${{ env.OUTPUT_DIR }}/*.gz

    
